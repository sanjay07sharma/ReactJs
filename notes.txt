Fact :

Developed by Facebook: React.js was developed by Facebook, and it was first deployed on Facebook's newsfeed in 2011. It was later open-sourced in 2013.

Declarative Syntax: React uses a declarative syntax, making it easier to understand and debug. Developers can describe the structure of their user interface and React takes care of updating and rendering the components when the state changes.

Virtual DOM: React uses a virtual DOM to improve performance. Instead of updating the entire DOM when changes occur, React updates a virtual representation of the DOM and then updates only the necessary parts in the actual DOM. This minimizes the number of manipulations in the real DOM, resulting in better performance.

Components: React is based on a component-based architecture. UIs are divided into reusable components, making it easier to manage and maintain large codebases. Components can be nested within each other, promoting a modular and scalable approach to building applications.

JSX: React uses JSX (JavaScript XML) for defining components. JSX allows developers to write HTML elements and components in a syntax that looks similar to XML or HTML, but it is actually a syntactic sugar for JavaScript.

One-way Data Binding: React enforces a unidirectional data flow, making it easier to understand how data changes over time. Data flows down the component hierarchy, and child components cannot directly modify the state of their parent components.

React Native: React can be used for building not only web applications but also mobile applications. React Native is a framework that allows developers to build mobile apps using React, sharing much of the code between web and mobile platforms.

React Hooks: Introduced in React 16.8, hooks are functions that allow developers to use state and lifecycle features in functional components. This provides a cleaner and more concise way to manage component state and lifecycle events.

Community and Ecosystem: React has a vibrant and active community. There are numerous third-party libraries, tools, and resources available, making it easy for developers to find solutions and enhance their development workflow.

React's Popularity: React has gained widespread adoption and is used by many large companies, including Facebook, Instagram, Airbnb, and Netflix. Its popularity is attributed to its efficiency, flexibility, and the developer-friendly features it offers.



package.json is configuration


node module

transitive dependecies - our poriject is depended onn parcel
parlcel in trun isdependednt onother dependecies


package.json --> dependeices our prohject need
package-lock.json ---> lock of all transeint dependencies.

if i ahve packege.json and package-loc.json it will recreate all the dependencies your project need.

what ever you can regenerate you dont have to to git.
in our prorject what can we recreate?? ---> node_modules.



npx parcel index.html  ---->  parcel creeated a server , hoisted the app on server.

meaning --> npx = executing a package, parcel goes the the osurce and build a developmental build over port.


dont get react to your project through cdn links, instead getit through npm commands 
why?? fecthing from cdn is costly operations.
so it beetter to make a network call have it on your node modukeules.

install react to package
npm install react
npm install react-dom

Now you need to import React, React-DOM from you node_module

run and it will throw error


# Parcel
    Dev Build
    Local Server
    HMR = Hot Module Replacement.
    File Watching Algorithm written in c++
    Caching - Faster Builds.
    Image Optimization
    Minification.
    Bundling.
    Compressing.
    Consistent Hashing --- read about it parcel.com 
    Code splitting
    Differential Bundling. - support older browser
    Diagnostics
    Error Handling
    HTTPs
    Tree Shaking- removes unused code
    Different buld for dev and prod build = 

    npx parcel build index.html ---> this wil thoe errro
    @parcel/namer-default: Target "main" declares an output file path of "App.js" which does not match the compiled bundle type "html".

    /home/odoo/workshop/works/Reactjs/ReactJs/package.json:5:11
        4 |   "description": "inital lession ",
    > 5 |   "main": "App.js",
    >   |           ^^^^^^^^ Did you mean "App.html"?
        6 |   "scripts": {
        7 |     "test": "jest"

    ðŸ’¡ Try changing the file extension of "main" in package.json.
  
  
 it 
 
 
 
 
 browserslist to package.json



http hhtps?? why  a hype?


What I EMMET?
    Ans. Emmet is a plugin for text editors and integrated development environments (IDEs) that allows you to write HTML and CSS code faster and more efficiently. It provides a shorthand syntax for writing code, which can greatly speed up your workflow.
    Emmet works by expanding abbreviations that you type into full HTML or CSS code. For example, if you type ul>li*3, Emmet will expand this to:

    <ul>

        <li></li>

        <li></li>

        <li></li>

    </ul>
    This can save a lot of time and typing when you're working on a large project.
    Emmet is supported by many popular text editors and IDEs, including Visual Studio Code, Sublime Text, Atom, and Brackets. It's easy to install and use, and there are many resources available online to help you get started with using Emmet.


DIFEEERENCE BETWEEN LIBRARY AND FRAMEWORK?

    Ans. While both libraries and frameworks are used to provide reusable code and functionality, there are some key differences between the two.
    A library is a collection of pre-written code that can be used to perform specific tasks or functions. It usually consists of a set of functions or classes that you can use in your code to perform tasks without having to write the code from scratch. Libraries are often used to provide functionality such as data manipulation, image processing, or file I/O. You use the library by calling its functions or classes from your code.
    On the other hand, a framework is a more comprehensive solution that provides a structure and a set of rules for building an entire application. It is a pre-written set of code that provides a particular architecture, design pattern, and way of working that developers can follow. Frameworks can include libraries as a part of their offering, but they also provide additional functionality such as pre-built components, templates, and APIs. With a framework, you are required to follow its structure and rules to build your application.
    In summary, while libraries provide specific functionality that can be used to perform specific tasks, frameworks are more comprehensive solutions that provide a structure and set of rules for building an entire application.

 

WHAT IS CDN WHY DO WE USE IT?

    Ans. A CDN (Content Delivery Network) is a network of distributed servers that are strategically placed in different geographic locations around the world. The primary purpose of a CDN is to deliver content to end-users with high availability and high performance.
    When you use a CDN, the content (such as es, videos, stylesheets, scripts, etc.) on your website is cached on multiple servers around the world. When a user requests your website, the CDN will serve the content from the server that is closest to the user's location. This reduces the latency and the time it takes to load your website, resulting in faster load times and a better user experience.
    CDNs are commonly used for websites with largounts of static content that are accessed by users from different geographic locations. They are also used for delivering rich media content, such as videos and images, which can be bandwidth-intensive and take longer to load.
    There are several benefits to using a CDN, includ
    Improved website performance: By delivering content from a server that is closest to the user's location, a CDN can significantly reduce the latency ane time it takes to load your website.
    Increased availability: With multiple servers hosting your content, a CDN can ensure that your website is always available, even in the event of a server oe or a surge in traffic.
    Reduced bandwidth costs: By offloading some of the bandwidth to the CDN's servers, you can reduce the bandwidth usage and the associated costs on your own serv
    Improved security: Some CDNs offer additional security features, such as SSL/TLS encryption and DDoS protection, which can help to protect your website from attacks and ensure the privacy of your users

 

WHY REACT IS KNOWN AS REACT?

    Ans. React is known as React because it is a JavaScript library for building user interfaces that "react" to changes in data. React was developed by Facebook and was first released in 2013.
    In traditional web development, when data changes, the developer must manually update the corresponding parts of the user interface. With React, however, changes in data are automatically reflected in the user interface, without the need for manual updates.
    React achieves this through its unique approach to rendering user interfaces, which is based on a virtual DOM (Document Object Model). When data changes, React updates the virtual DOM, and then efficiently updates only the parts of the actual DOM that have changed. This makes React fast and efficient, even when working with large and complex user interfaces.
    The name "React" also reflects the library's philosophy of breaking the user interface down into small, reusable components that can be easily composed together. This allows developers to build complex user interfaces out of simple building blocks, making it easier to develop and maintain large applications.

 

WHAT IS CROSS-ORIGIN IN THE SCRIPT TAG?

    Ans. Cross-origin (or cross-domain) refers to a security feature implemented in web browsers that prevents web pages from making requests to a different domain than the one the web page was served from. This feature is known as the "same-origin policy".
    The same-origin policy is designed to prevent malicious web pages from accessing sensitive data or functionality from other websites without the user's knowledge or consent. For example, if a user is logged into their bank's website and then visits a malicious website, that website should not be able to access the user's banking information by making requests to the bank's website.
    The same-origin policy applies to the use of the script tag in HTML. When you include a JavaScript file in your web page using the script tag, the browser will only execute that script if it is from the same origin as the web page. If the script is from a different origin, the browser will block it from executing.
    To allow scripts from other origins to be executed, you can use Cross-Origin Resource Sharing (CORS) headers on the server that serves the script file. These headers tell the browser that it is safe to execute the script from a different origin.
    Alternatively, you can use JSONP (JSON with Padding) to load data from a different domain using the script tag. JSONP works by including a callback function name in the URL, which is executed by the browser when the script is loaded. However, JSONP has some security concerns and is not widely used anymore.

 

WHAT IS THE DIFFEENCE BETWEEN REACT AND REACTDOM?

    Ans. React and ReactDOM are two different packages in the React library.
    React is the core package of the React library and provides the functionality for creating and managing components, updating the state and props of components, and rendering components to the virtual     
    ReactDOM, on the other hand, is a package that provides the functionality for rendering React components to the actual DOM in the browser. It is responsible for managing the lifecycle of the React com    ponentandling events, and updating the actual DOM with changes made to the virtual DOM by React.
    In summary, React is the core package that provides the functionality for creating and managing components, while ReactDOM provides the functionality for rendering those components to the actual DOM i    n the brow
    When building a web application with React, both packages are essential and typically used together. You will use React to define and manage the structure and behavior of your components, and ReactDOM     to render those components to the browsWHAT IS DIFFERENCE BETWEEN REACT.DEVELOPMENT.JS AND REACT.PRODUCTION.JS FILES VIA?

    Ans. React is a JavaScript library that is commonly used in web development. When using React in a web application, you can choose to use either the development version or the production version of the React library.
    The main difference between the development and production versions of React is the size of the code and the level of optimization that is performed on the code.
    The development version of React (react.development.js) is a larger file size that includes additional warnings and error messages. This version is intended to be used during development and debugging, as it provides more helpful error messages and debugging information to developers.
    The production version of React (react.production.js) is a smaller file size that has been optimized for performance and does not include any additional warnings or error messages. This version is intended to be used in production environments where performance is critical.
    When using a CDN to serve the React library, you can choose to serve either the development or production version depending on your needs. If you are developing and debugging your application, you may want to use the development version to get more helpful error messages. However, in production environments, it is recommended to use the production version to ensure optimal performance.
    It is worth noting that using the production version of React during development may make debugging more difficult, as error messages will be less descriptive. Similarly, using the development version in production may result in larger file sizes and slower performance.

 

WHAT IS SYNC AND DIFFER?

 

 

wHAT IS NPM?
    Ans. NPM (Node Package Manager) is a package manager for the JavaScript programming language. It is used primarily for managing Node.js modules, but can also be used for managing client-side JavaScript packages.
    With NPM, developers can easily install, update, and remove packages or modules that they need for their projects. NPM packages are typically distributed as open-source modules that can be installed using the NPM command line interface (CLI).
    NPM maintains a repository of over a million packages, including popular packages such as React, Express, and lodash. Developers can search for packages on the NPM website or using the NPM CLI and install them in their project by running a simple command.
    NPM also provides a way for developers to manage dependencies between packages. When you install a package using NPM, it will automatically install any dependencies that the package requires. This makes it easy to manage complex projects with many dependencies.
    In addition to managing packages, NPM can also be used to run scripts, such as build scripts, test scripts, or deployment scripts. This makes it easy to automate common tasks in your development workflow.
    Overall, NPM is a powerful and essential tool for modern web development, allowing developers to easily manage dependencies and packages for their projects.

 

WHAT IS 'PARCEL/WEBPACK' ? WHY DO WE NEED IT?

    Ans. Parcel and Webpack are both module bundlers for JavaScript applications. They are used to bundle JavaScript files and other assets, such as CSS files, images, and fonts, into a single, optimized package that can be loaded by a web browser.
    Here are some key differences between the two:
    Parcel is a "zero-config" bundler, which means that it requires very little setup or configuration. It uses sensible defaults to automatically handle things like file types and module resolution. Webpack, on the other hand, requires more configuration but offers more flexibility and customization options.
    Webpack has been around longer and is more widely used, so there is a larger community and more resources available for it. However, Parcel is gaining popularity due to its ease of use and simplicity.
    Parcel is faster than Webpack in some cases, due to its use of a multicore compiler and other optimizations. However, Webpack has more advanced optimization features, which can make it faster in certain scenarios.
    In general, both Parcel and Webpack are used to bundle JavaScript applications to improve performance and optimize loading times. They can also be used to transpile modern JavaScript features and syntax, such as ES6, into browser-compatible code.
    In addition, these bundlers can handle other assets, such as CSS files and images, and optimize them for production use. This can include tasks like minification, compression, and tree shaking, which help to reduce the size of the bundle and improve performance.
    Overall, Parcel and Webpack are essential tools for modern web development, allowing developers to optimize and bundle their applications for better performance and user experience.

 

WHAT IS '.PARCEL-CACHE'?
    Ans. .parcel-cache: This is a cache folder that is created by Parcel bundler to store previously built assets and avoid rebuilding them again in subsequent builds. It helps to speed up the build process and improve performance.

 

WHAT IS NPX?

    Ans. npx: This is a command-line tool that comes with npm (Node Package Manager) and allows you to run executables from local or remote npm packages without installing them globally. It helps to simplify development workflows and reduce package pollution on your system.

 

WHAT IS DIFFERENCE BETWEEN DEPENDENCIES AND DEV DEPENDENCIES

    Ans. Dependencies are the packages that are required for your application to run properly in production. On the other hand, dev dependencies are packages that are only required during development, such as testing frameworks, linters, and build tools.

 

WHAT IS TREE SHAKING?

    Ans. Tree shaking is a technique used by modern JavaScript bundlers to eliminate dead code (unused code) from the final production bundle. It helps to reduce the bundle size and improve the application's performance.

 

WHTA IS HOT MODULE REPLACEMENT?

    Ans. Hot Module Replacement (HMR) is a feature that allows developers to update the application code in real-time without requiring a full browser refresh. This speeds up the development process by enabling quick iterations and reducing development time.

 

LIST DOWN YOUR 5 FAV 5 SUPERPOWERS OF PAREL AND DESCRIBE ANY 3 OF THEM ?

    Ans. Some of the superpowers of Parcel include lightning-fast builds, support for various file formats and languages, zero configuration setup, and automatic asset optimization.

 

WHAT IS GITIGNORE? WHAT SHOULD WE NEED AND NOT ADD INTO IT?
    Ans. Gitignore is a file that tells Git which files or directories to ignore when committing changes. It is used to exclude files or directories that are not required in the repository, such as build artifacts, dependencies, and temporary files.

 

WHAT IS THE DIFFERENCE BETWEEN PACKAGE.JSON AND PACKAGE-LOCK.JSON?

    Ans. package.json contains information about the project, such as dependencies, scripts, and metadata. package-lock.json, on the other hand, is a file that ensures consistent installation of packages by locking down the versions of installed dependencies.

 

WHY SHOULD I NOT MODIFY 'PACKAGE-LOCK.JSON'

    Ans. Package.json is a file that contains metadata about your project and a list of dependencies and dev dependencies required for your application. Package-lock.json is a file that keeps track of the exact versions of each dependency installed and their dependencies, ensuring that the same versions are installed across different environments. You should not modify package-lock.json manually, as it is automatically generated by npm.

 

WHAT IS 'NODE_MODULES'? IT IS A GOOD IDEA TO PUSH THAT ON GIT?

    Ans. Node_modules is a folder that contains all the installed dependencies for your project. It is not a good idea to push the node_modules folder to Git, as it can be large and slow down the repository. Instead, you should use a package manager like npm to install the dependencies on each machine.

 

WHAT IS THE DIST FOLDER?

    Ans. The dist folder is a folder that contains the final output of your build process, typically containing optimized and minified files ready for production use.

 

WHAT IS 'BROWSERLISTS'READ ABOUT DIFF BUNDLERS: VITE, WEBPACK, PARCEL.

    Ans. Browserslist is a configuration file that specifies the list of browsers and their versions that your project should support. It is used by tools like Babel and Autoprefixer to determine which browser-specific features to transpile or polyfill.


Vite, Webpack, and Parcel are all module bundlers used in modern web development. Vite is a newer bundler that is designed for fast development and hot module replacement, while Webpack is a more mature bundler with a large ecosystem and advanced optimization features. Parcel is a zero-configuration bundler that is fast and easy to use but may have fewer customization options.

 

READ ABOUT: ^-CARET AND ~ -TILDA

    Ans.  The ^ (caret) and ~ (tilde) symbols are used in the package.json file to specify version ranges for dependencies. The caret (^) indicates that the package can be updated to a newer minor or patch version, while the tilde (~) indicates

 
WHAT ARE SCRIPT TYPES IN HTML?

    Ans. Script types are used in HTML to define the type of script being included in the page. The most common types of scripts used in HTML are:

    text/javascript: This is the default script type for JavaScript files. It is used to define scripts written in the JavaScript programming language.
    text/html: This is used to define inline scripts written in HTML. It is typically used to include small snippets of code or event handlers.
    application/javascript: This is similar to text/javascript but is used for scripts that are served with the application MIME type.
    module: This is a newer script type used for JavaScript modules. It allows for better organization of code and can help improve performance.
    text/css: This is used to define CSS stylesheets that are included in the page.
    It is important to use the correct script type in HTML to ensure that the browser can properly interpret and execute the script.

 

 

Sent from Outlook for Android

  * const heading = React.createElement('h1', {id:'heading'}, 'I am H1');   * just creating a h1

  *Now ahieve this
/*
    <div id="parent">
        <div id="child">
            <div id="sibling2">
                <h1>Hello i am H1</h1>
            </div>
            <div id="sibling1">
                <h2>Helllo i am H2</h2>
            </div>
        </div>
    </div>

    syntax of creating a dom element in react and displaying in doc

    const head = Reach.createElement('tag', {'attributes: value'}, "content");   * creates and object.
    proof  => consol.log(head)

    create root = ReactDom.createRoot(document.getElementById("root"));

    root.render(head);

*/

  *

  * const parent  = React.createElement('h1', {id:'parent'}, 'Sanjay is here');

  *   * so root is hwere u want react to render item to!!!! it cna be whole doc or some picec of dom
  * const root = ReactDOM.createRoot(document); 
  * root.render(parent);   * render will replae everything inside the root and put new stuff



npm start == npm run start ===> beind the scene it runs npx parcel index.html.

#Babel
    - transpile es6 code for older browser.
    - champ of compile, 
    - converts different code to different code.
    -Parcel is a manager of Babel
    ##read Babel




    * const var_name = <tag id="" className="">Value to represent</tag>;
    const jsxHeading = (
    <h1 id="parent" tabIndex="5">
        hello World
    </h1>);
    * jsx syntax => ReactElemnt => js-object => HTMLemlement(render)


React Component
  * Class Based Components -OLD
  * React Functional Component - NEW
      * - always name it with Capital letter.
      *- its a normal js function which returns a jsx component/ react element.

const HeadingComponent = () => {
    return <h1 className="heading">React functional Component</h1>
}

/*
const HeadingComponent = () => {
    return <h1>React functional Component</h1>
}

is same as

const HeadingComponent = () => return <h1>React functional Component</h1>

*/

  * const HeadingComponent2 = () => <h1 className="heading">React functional Component wiht no return </h1>
  *how to render?



What is Babel?
    Babel is a JavaScript compiler that can translate markup or programming languages into JavaScript.

    With Babel, you can use the newest features of JavaScript (ES6 - ECMAScript 2015).

    Babel is available for different conversions. React uses Babel to convert JSX into JavaScript.

    Please note that <script type="text/babel"> is needed for using Babel.

Example
    <div id="id01">Hello World!</div>

    <script type="text/babel">
    ReactDOM.render(
        <h1>Hello React!</h1>,
        document.getElementById('id01'));
    </script>


Try it Yourself Â»

REACT ELEMENTS
   * React applications are usually built around a single HTML element.

    * React developers often call this the root node (root element):

    * <div id="root"></div>

    * React elements look like this:

    * const element = <h1>Hello React!</h1>

    * Elements are rendered (displayed) with the ReactDOM.render() method:

    * ReactDOM.render(element, document.getElementById('root'));

Try it Yourself Â»

    React elements are immutable. They cannot be changed.

    The only way to change a React element is to render a new element every time:

Example
    function tick() {
        const element = (<h1>{new Date().toLocaleTimeString()}</h1>);
        ReactDOM.render(element, document.getElementById('root'));
    }
    setInterval(tick, 1000);

Try it Yourself Â»

    React Components
    React components are JavaScript functions.

    This example creates a React component named "Welcome":

Example
    function Welcome() {
        return <h1>Hello React!</h1>;
    }
    ReactDOM.render(<Welcome />, document.getElementById('root'));

Try it Yourself Â»

    React can also use ES6 classes to create components.

    This example creates a React component named Welcome with a render method:

Example
    class Welcome extends React.Component {
        render() { return(<h1>Hello React!</h1>); }
    }
    ReactDOM.render(<Welcome />, document.getElementById('root'));

Try it Yourself Â»

    React Component Properties
    This example creates a React component named "Welcome" with property arguments:

Example
    function Welcome(props) {
        return <h1>Hello {props.name}!</h1>;
    }
    ReactDOM.render(<Welcome name="John Doe"/>, document.getElementById('root'));

Try it Yourself Â»

    React can also use ES6 classes to create components.

    This example also creates a React component named "Welcome" with property arguments:

Example
    class Welcome extends React.Component {
        render() { return(<h1>Hello {this.props.name}</h1>); }
    }
    ReactDOM.render(<Welcome name="John Doe"/>, document.getElementById('root'));

    Try it Yourself Â»


What is JSX?
    JSX stands for JavaScript XML.

    JSX is an XML/HTML like extension to JavaScript.

    Example
    const element = <h1>Hello World!</h1>

    As you can see above, JSX is not JavaScript nor HTML.

    JSX is a XML syntax extension to JavaScript that also comes with the full power of ES6 (ECMAScript 2015).

    Just like HTML, JSX tags can have a tag names, attributes, and children. If an attribute is wrapped in curly braces, the value is a JavaScript expression.

    Note that JSX does not use quotes around the HTML text string.

    React DOM Render
    The method ReactDom.render() is used to render (display) HTML elements:

# JSX
    - jsx is separate.
    - jsx makke developers part easy.
    - is aconvention where we merge html nad js together.
    - jsx in not an html inside js, its a html like or xml like syntax.
    - its just a syntax.
    - js engine cannot understasnd this language. js engien understand echmascript so jsx synntax is not valid js.
    - so how js engine understands it?  Parcel is doing this behind th escene. its transpiled before it goes t js engine, and in parcel
    - its Babel's job to convert it such that react will understand, its a javascript compiler.

    const jsxHeading = <h1 id="parent">hello World</h1>;
    * jsx syntax Babel converts it to => ReactElemnt => js-object => HTMLemlement(render)


    jsx syntax to declare a variable:

    -const var_name = <tag id="" className="">Value to represent</tag>;
    * Note while giving attributes tojsx syntax we use camelCase thisis somehting we dont do in html, hence jsx is an html like syntax not html.

    - ##home work: check all syntax for jsx.

    - wheile writing syntax in multiple lines , wrap itinside ();

JSX Expressions
    Expressions can be used in JSX by wrapping them in curly {} braces.

    Example
    <div id="id01">Hello World!</div>

    <script type="text/babel">
    const name = 'John Doe';
    ReactDOM.render(
        <h1>Hello {name}!</h1>,
        document.getElementById('id01'));
    </script>

JSX Compiler
    The examples on this page compiles JSX in the browser.

For production code, the compilation should be done separately.

Create React Application
Facebook has created a Create React Application with everything you need to build a React app.

It is a a development server that uses Webpack to compile React, JSX, and ES6, auto-prefix CSS files.

The Create React App uses ESLint to test and warn about mistakes in the code.

To create a Create React App run the following code on your terminal:

Example
npx create-react-app react-tutorial

Make sure you have Node.js 5.2 or higher. Otherwise you must install npx:

Example
npm i npx

Start one folder up from where you want your application to stay:

Example
C:\Users\myUser>npx create-react-app react-tutorial

Success Result:
npx: installed 63 in 10.359s
Creating a new React app in C:\Users\myUser\react-tutorial.
Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts...
+ react-dom@16.5.2
+ react@16.5.2
+ react-scripts@2.0.4
added 1732 packages from 664 contributors and audited 31900 packages in 355.501s
found 0 vulnerabilities+ react@16.5.2

Success! Created react-tutorial at C:\Users\myUser\react-tutorial
Inside that directory, you can run several commands:

npm start
Starts the development server.

npm run build
Bundles the app into static files for production.

npm test
Starts the test runner.

npm run eject
Removes this tool and copies build dependencies, configuration files
and scripts into the app directory. If you do this, you can't go back!

We suggest that you begin by typing:

cd react-tutorial
npm start


* #JSX beauty
1 const var_name = <tag id="" className="">Value to represent</tag>;
  * jsx syntax => ReactElemnt => js-object => HTMLemlement(render)

  * React Component
  * Class Based Components - OLD - uses js classes.
  * React Functional Component - NEW - uses js fucntins.
      * - always name it with Capital letter.
      *- its a normal js function which returns a jsx component/ react element.
Jsx expression can only have one parentelement, it can only have one root.


const HeadingComponent = () => {
    return <h1>React functional Component</h1>
}

is same as

const HeadingComponent = () => return <h1>React functional Component</h1>

* const HeadingComponent2 = () => <h1 className="heading">React functional Component wiht no return </h1>
*how to render?



plaanning out application:

/*
Componenets required":

1 Header
    - Logo
    - Nav braces
2 Body
    - Search
    - Restraunt container
        - Restraunt cards
3 Footer
    - Copyright
    - Links
    - Adress
    - Contacts

*/



props ? A normal arguments TO A FUNCTION.
Passing a prop to a component === passing a prop to a function


Config Driven UI :
delhi has different curousel, bnagalurur has different,
this data comes form backend
when UI changes according to our data in 
UI is powered by DATA


/*

inline style in react 


way 1: 
const css = {
    backgroundColor : '#f0f0f0',
    width: '200px',
    height:' 300px',
    border: '1px solid black',
}; && pass css to style={}

way 2 : give js object to style={({css})}
*/


 // can also use destructuring 
    const {resData} = props; // what props here ctually is {resName:"Sanjay Foods", cuisines:"Dosa, South Indian, Asia", stars:"4.4 stars", deliveryTime:"38 minutes delivery time"} for res casrd 1.


// not using key is not acceptable, index as key(last resort) <<<<<< unique key(best practice)


Q    anything we do using react we can do that using html and js so why we need react?

While it is possible to achieve similar functionality using vanilla HTML, CSS, and JavaScript,
React simplifies the development process and offers additional benefits such as 
( Component-based architecture,Virtual DOM, Declarative syntax, React ecosystem, Performance optimizations, Strong community support ) 
that can save time and effort in building robust and maintainable web applications.



Q   is there ny defined folder stuructre?
Ans react doesnot care how you keep your files and folder
but there are common approaches used in the industry

    1. Grouping by routes
    2. Grouping by file types
    3. avoid too much nested.

Q   what is the difference between abc.js, abc.jsx, abc.tsx?

The file extensions you mentioned - .js, .jsx, and .tsx - are commonly used in React development. Here's a breakdown of what each extension represents:

.js (JavaScript):

This is the standard extension for JavaScript files. It indicates that the file contains JavaScript code.
In React, you can use .js files to write your components and application logic. You can create React components using JavaScript syntax and JSX syntax within these files.
.jsx (JavaScript XML):

JSX is an extension to JavaScript that allows you to write HTML-like code within your JavaScript files.
When you use the .jsx extension, it typically indicates that the file contains React components written using JSX syntax. JSX is a convenient and expressive way to define the structure and appearance of your components.
.tsx (TypeScript XML):

TypeScript is a superset of JavaScript that adds static typing and other features to JavaScript.
When you use the .tsx extension, it indicates that the file contains React components written using TypeScript syntax. TypeScript allows you to add static type checking and other TypeScript-specific features to your React code, which can help catch errors during development and improve code maintainability.
In summary, all three extensions - .js, .jsx, and .tsx - can be used to write React components and application logic. The choice of extension depends on whether you're using plain JavaScript (.js), JavaScript with JSX syntax (.jsx), or TypeScript with JSX syntax (.tsx). TypeScript adds static typing and other TypeScript-specific features to enhance the development experience and code quality.



import exprt a component

make separate files fo component, and then import them to your app.js

way 1 -->  export component(definition) then import component from location
way 2 --> component(definition) , export default component name ---> then import component from location


module cannot have multiple default export.
there are two types of export :
    1. Named expert --> const
    2. default export --->  export cont fun ()


# React Hooks

-useSate()  - super powerful react variables.
            - when ever the state varibale update react re-renders the component.

# React Algorithm

it uses re-concillliation algorithm aka React-Fibre
suppose res-container has 5 resCards ----onClicked--> it rerenders it to res-contianer with 3 resCards.

what react does is,it crates a virtual DOM (a representAION of acutal Of DOM)

Diff ALgorithm:

finds out the difference between old virtual dom and new virtual dom.



#######################3 notes Let's get Hooked!
Theory
â€¢ What is the difference between Named Export, Default export and * as export? â€¢ What is the importance of config.js file
Named Exports :
    - allows multiple exports.
    - imported by specific names.
    - must be explicitly specified by export keyword.

Default Exports :
    - allows only one default export per module
    - can be imported by any reference nama, needs not to be same as defined but its good practic to give same name.

wildCard Export;
    - syntax import *as ref_name from './path'.
    - allows imports all exported references as object 
    - accessed using ref_name.value

congfig.js file:
    -  not a standard part of JavaScript or web development but can be used for to store configuration varibaoles or constants

What are React Hooks?



â€¢ Why do we need a useState Hook?
Coding
â€¢ Clean up your code
â€¢ Create a Folder Structure for your app â€¢ Make different files for each Components Create a config file
â€¢ Use all types of import and export Create a Search Box in your App
â€¢ Use useState to create a variable and bind it to the input box
â€¢ Try to make your search bar work
References
â€¢ Code Link - https://bitbucket.org/namastedev/namaste-react-live/src/master/




Whenever state variable changes React rerender whole component where it is defined.

Best part and good question

const [btnName, setBtnName] = useState("Login");

How setBtnName is able to update the value of const btnName isnt it defying the laws of javascript.
Ans: it is able to do it because every time whn setBtnName() call is made btnName is new variable than it was before.
hence const remains the same as is.

Guru Mantra: "CODE SLOW" those who code faster take alot tiem to debug, those who code slow dont need it all.

---------------------------------------------------------

useEffect:

syntax :  takes 2 argumemt , 1 callback function and other the dependency array.
useEffect(() => {}, []);

when called ?  -> after evey time my component is rendered


Link component given to ud react-router-dom.
<li><Link to="/">Home</Link></li>  this si used in place of <li><a href="/">Home</a></li>
why not use <a>?
remeber <a> tag will reload whole page and we dont want that.

Heart of single page application.

Two tpyes of routing:
1) client side
2) server side

by using <Link> we are making client side routing


// Next Commit dynamic routing.
we will make restraunt menu page.


What is Monolith architecture?

Monolith architecture is a traditional software architecture where the entire application is built as a single,
self-contained unit. All the components of the application are tightly coupled and run in a single process or on a single server.

What is the difference between Monolith and Microservice?

Monolith architecture is a traditional software architecture where the entire application is built as a single, s
self-contained unit. All the components of the application are tightly coupled and run in a single process or on a 
single server. On the other hand, Microservice architecture is a modern software architecture where the application 
is broken down into smaller, independent services that communicate with each other over a network. Each service is 
responsible for a specific business capability and can be developed, deployed, and scaled independently.


Why do we need a useEffect Hook?

The useEffect Hook is used to perform side effects in functional components. Side effects include things like 
fetching data from an API, updating the DOM, or subscribing to events. We need the useEffect Hook because functional
components don't have lifecycle methods like class components, and we need a way to perform side effects when the 
component mounts, updates, or unmounts.


What is Optional Chaining

Optional Chaining is a new feature in JavaScript that allows you to safely access nested properties of an object 
without having to check if each property exists. It uses the ?. operator to access properties, and if any property 
in the chain is null or undefined, the expression short-circuits and returns undefined.

What is Shimmer UI?

Shimmer UI is a design pattern used to indicate that content is loading or that a component is in a loading state. 
It is typically used in place of a blank or empty component to provide visual feedback to the user that something 
is happening.


What is the difference between JS expression and JS statement?

A JavaScript expression is a piece of code that evaluates to a value. Examples of expressions include literals,
variables, and function calls. A JavaScript statement, on the other hand, is a piece of code that performs an 
action. Examples of statements include if statements, loops, and function declarations.


What is Conditional Rendering, explain with a code example?

Conditional Rendering is a technique used in React to conditionally render components based on some condition. 
Here's an example:
In this example, the Greeting component conditionally renders a different message based on whether the user is 
logged in or not.

`function Greeting(props) {
  if (props.isLoggedIn) {
    return <h1>Welcome back!</h1>;
  } else {
    return <h1>Please log in.</h1>;
  }
}`

What is CORS?

CORS (Cross-Origin Resource Sharing) is a security feature implemented by web browsers that restricts web pages 
from making requests to a different domain than the one that served the web page. 
This is done to prevent malicious websites from stealing data or performing actions on behalf of the user.


What is async and await?

async and await are keywords in JavaScript that are used to work with asynchronous code. 
The async keyword is used to define an asynchronous function, and the await keyword is used to wait for a promise 
to resolve before continuing execution. Here's an example:
In this example, the fetchData function is defined as an asynchronous function, and the await keyword is used to wait for the fetch and json methods to complete before returning the data.

`async function fetchData() {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  return data;
}`

What is the use of const json = await data.json(); in getRestaurants?

const json = await data.json(); is used to parse the response from an API call to a JSON object. 
In the getRestaurants function, data is the response object returned by the fetch method, and json is the parsed 
JSON object that is returned by the function. This allows us to work with the data returned by the API in a more 
convenient way.


------

What are various ways to add images into our App? Explain with code examples.

There are several ways to add images to a React app:

Importing the image file and using it as the src attribute of an img tag.
Using the require function to load the image file and using it as the src attribute of an img tag.
Using a CSS background-image property to set the image as the background of an element.
Here are some code examples:

`// Importing the image file
import logo from './logo.png';
function App() {
  return (
    <div>
      <img src={logo} alt="Logo" />
    </div>
  );
}

// Using the require function
function App() {
  return (
    <div>
      <img src={require('./logo.png')} alt="Logo" />
    </div>
  );
}

// Using a CSS background-image property
function App() {
  return (
    <div style={{ backgroundImage: `url(${require('./background.jpg')})` }}>
      <h1>Hello, world!</h1>
    </div>
  );
}`

What would happen if we do console.log(useState ())?

If you call useState() without passing an initial value, it will return an array with two elements: 
the current state value and a function to update the state value. If you log this array to the console, 
you will see the initial state value and the update function. However, this is not a recommended practice 
because it can lead to confusion and errors in your code.


How will useEffect behave if we don't add a dependency array?

If you don't add a dependency array to the useEffect Hook, it will run on every render of the component. 
This can cause performance issues and unnecessary re-renders. It is recommended to add a dependency array to the 
useEffect Hook to specify which variables the effect depends on, so that it only runs when those variables change.


What is SPA?

SPA (Single Page Application) is a web application that loads a single HTML page and dynamically updates the content
as the user interacts with the app. Instead of loading new pages from the server, the app uses JavaScript to 
update the DOM and fetch data from APIs. This provides a faster and more seamless user experience.


What is the difference between Client Side Routing and Server Side Routing?

Client Side Routing is a technique used in SPA where the routing is handled entirely on the client side using J
avaScript. When the user clicks on a link, the app updates the URL and renders the appropriate component without 
making a request to the server. This provides a faster and more seamless user experience, but requires more initial 
setup and can be less SEO-friendly.
Server Side Routing is a traditional technique where the routing is handled on the server side. 
When the user clicks on a link, the browser makes a request to the server, which returns the appropriate HTML page.
This provides better SEO and is easier to set up, but can be slower and less responsive.



In React, you can use map, filter, and reduce just like you would in regular
JavaScript to manipulate arrays and create dynamic user interfaces.
These functions are commonly used when working with arrays of data in your components.

Map: The map function is used to transform an array of data into a new array of the same length.
It applies a provided function to each element of the array and returns a new array with the results.
In React, you can use map to render a list of components based on an array of data. For example:


const numbers = [1, 2, 3, 4, 5];

const doubledNumbers = numbers.map((number) => number * 2);

const numberList = numbers.map((number) => <li key={number}>{number}</li>);

// Render the list in a component
function NumberList() {
  return <ul>{numberList}</ul>;
}


Filter: The filter function is used to create a new array containing elements that satisfy a certain condition.
In React, you can use filter to conditionally render components based on a specific condition. For example:


const people = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 30 },
  { name: 'Charlie', age: 22 },
];

const adults = people.filter((person) => person.age >= 18);

// Render the list of adults in a component
function AdultList() {
  return (
    <ul>
      {adults.map((person) => (
        <li key={person.name}>{person.name}</li>
      ))}
    </ul>
  );
}


Reduce: The reduce function is used to reduce an array to a single value by applying a function 
that accumulates results from each element in the array. In React, you can use reduce for more 
complex data transformations. For example, you can use reduce to calculate the sum of an array of numbers:


const numbers = [1, 2, 3, 4, 5];

const sum = numbers.reduce((accumulator, currentNumber) => accumulator + currentNumber, 0);

// Render the sum in a component
function SumComponent() {
  return <p>Sum: {sum}</p>;
}
In all these examples, you can use the results obtained from map, filter, or reduce 
to render components in your React application. These array manipulation functions are very 
useful when working with dynamic data and lists of items in your UI.



Behind the scene <Link> is nothing but a wrapper to anchor tag.



Why we always have to use super(props) for class component?
why cant make useEffect async? 
: The useEffect hook in React is designed to handle side effects in your components.
It expects a function that returns either nothing, or a cleanup function.
When you declare a function as async, it implicitly returns a Promise,
even if you don't explicitly return anything.
This is because async functions are designed to handle asynchronous operations, and they use Promises to do this.
Therefore, if you pass an async function to useEffect, you're actually returning a Promise,
which violates the contract of useEffect. However, you can still perform asynchronous operations inside useEffect 
by defining an async function inside the effect and then calling it:



why we use super(props) ?
In React, super(props) is used in the constructor of a subclass (a class that extends another class,
typically a React component) to call the constructor of its parent class.
When you create a subclass in JavaScript (or in React),
if you define a constructor function, the first thing you should do inside the constructor is to call super().
This is necessary because this in an ES6 class constructor is uninitialized until super is called.
In the context of React, super(props) is used to make this.props available in the constructor.
If you don't call super(props), this.props will be undefined in the constructor, which can lead to bugs.
 example:
 
 class MyComponent extends React.Component {
  constructor(props) {
    super(props); // Now this.props is available
    console.log(this.props); // Prints the props passed to the component
  }

  render() {
    // ...
  }
}

here super(props) is called in the constructor of MyComponent to make this.props available.
If you removed super(props), this.props would be undefined in the constructor.


Single Responsibility Principle:



Hooks are utility function provied by React


what we did:

Made a cutom hook:

===================================================================================================================================

Appearance:

Various ways to add style to your app:
    - css
    -sass || scss 
    - material UI
    - bootstrap
    - ant design
    - chakra UI
    - Tailwind.
    
for tailwind package
in order to use it 
    - firstly seek the package you are working with.
    
Install Tailwind CSS
    Install tailwindcss and its peer dependencies via npm, and then run the init command to generate tailwind.config.js.

Terminal

    npm install -D tailwindcss postcss
    npx tailwindcss init

Configure PostCSS
    Create a .postcssrc file in your project root, and enable the tailwindcss plugin.

    .postcssrc

    {
        "plugins": {
            "tailwindcss": {}
        }
    }
           
Configure your template paths
    Add the paths to all of your template files in your tailwind.config.js file.

    tailwind.config.js

    /** @type {import('tailwindcss').Config} */
    module.exports = {
        content: [
            "./src/**/*.{html,js,ts,jsx,tsx}",
        ],
        theme: {
            extend: {},
        },
        plugins: [],
    }
    
Add the Tailwind directives to your CSS
    Create a ./src/index.css file and add the @tailwind directives for each of Tailwindâ€™s layers.

index.css

    @tailwind base;
    @tailwind components;
    @tailwind utilities;
    Start your build process
    Run your build process with npx parcel src/index.html.

Terminal

npx parcel src/index.html

Start using Tailwind in your project
    Add your CSS file to the <head> and start using Tailwindâ€™s utility classes to style your content.

    index.html

    <!doctype html>
    <html>
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="./index.css" rel="stylesheet">
        </head>
        <body>
            <h1 class="text-3xl font-bold underline">
                Hello world!
            </h1>
        </body>
    </html>



why Tailwind? 

Its light-weight: why? -> supposes you never used any class tailwinf will never import it.

Build whatever you want, seriously.

Because Tailwind is so low-level,
it never encourages you to design the same site twice.
Even with the same color palette and sizing scale,
it's easy to build the same component with a completely different look in the next project.


Itâ€™s tiny â€” never ship unused CSS again.

Tailwind automatically removes all unused CSS when building for production,
which means your final CSS bundle is the smallest it could possibly be.
In fact, most Tailwind projects ship less than 10kB of CSS to the client.


Responsive everything.

Wrestling with a bunch of complex media queries in your CSS sucks,
so Tailwind lets you build responsive designs right in your HTML instead.

Throw a screen size in front of literally any utility class and watch it magically 
apply at a specific breakpoint.
example
sm: some style, lg: some style ---> depending on the size of your device it changes.


Hover and focus states? We got â€™em.

Want to style something on hover? Stick hover: at the beginning of the class you want to add.
Works for focus, active, disabled, focus-within, focus-visible,
and even fancy states we invented ourselves like group-hover.


Worried about duplication? Donâ€™t be.

If you're repeating the same utilities over and over and over again,
all you have to do is extract them into a component or template partial 
and boom â€” you've got a single source of truth so you can make changes in one place.

 "Rendered more hooks than during the previous render" usually occurs:
 when you call a Hook conditionally or inside a loop,
 function, or nested function. Hooks must always be called at the top level of your React function.
